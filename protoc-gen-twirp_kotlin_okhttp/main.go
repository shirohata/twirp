// Copyright 2018 Twitch Interactive, Inc.  All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may not
// use this file except in compliance with the License. A copy of the License is
// located at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// or in the "license" file accompanying this file. This file is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

package main

import (
	"bytes"
	"flag"
	"fmt"
	"os"
	"path"
	"path/filepath"
	"strconv"
	"strings"
	"unicode"

	"github.com/golang/protobuf/proto"
	"github.com/golang/protobuf/protoc-gen-go/descriptor"
	plugin "github.com/golang/protobuf/protoc-gen-go/plugin"
	"github.com/twitchtv/twirp/internal/gen"
	"github.com/twitchtv/twirp/internal/gen/stringutils"
	"github.com/twitchtv/twirp/internal/gen/typemap"
)

func main() {
	versionFlag := flag.Bool("version", false, "print version and exit")
	flag.Parse()
	if *versionFlag {
		fmt.Println(gen.Version)
		os.Exit(0)
	}

	g := newGenerator()
	gen.Main(g)
}

func newGenerator() *generator {
	return &generator{output: new(bytes.Buffer)}
}

type generator struct {
	reg    *typemap.Registry
	output *bytes.Buffer
}

func (g *generator) Generate(in *plugin.CodeGeneratorRequest) *plugin.CodeGeneratorResponse {
	genFiles := gen.FilesToGenerate(in)
	g.reg = typemap.New(in.ProtoFile)

	resp := new(plugin.CodeGeneratorResponse)
	for _, f := range genFiles {
		respFile := g.generateFile(f)
		if respFile != nil {
			resp.File = append(resp.File, respFile)
		}
	}

	return resp
}

func (g *generator) generateFile(file *descriptor.FileDescriptorProto) *plugin.CodeGeneratorResponse_File {
	g.P("// Code generated by protoc-gen-twirp_kotlin_okhttp ", gen.Version, ", DO NOT EDIT.")
	g.P("// source: ", file.GetName())
	g.P()

	g.P("package ", getJavaPackage(file))
	g.P()
	g.P(`import com.google.protobuf.Message`)
	g.P(`import kotlinx.coroutines.Dispatchers`)
	g.P(`import kotlinx.coroutines.withContext`)
	g.P(`import okhttp3.OkHttpClient`)
	g.P(`import okhttp3.Request`)
	g.P(`import okhttp3.RequestBody.Companion.toRequestBody`)
	g.P(`import okhttp3.ResponseBody`)

	for _, service := range file.Service {
		g.generateProtobufClient(file, service)
	}

	resp := new(plugin.CodeGeneratorResponse_File)
	resp.Name = proto.String(ktFileName(file))
	resp.Content = proto.String(g.output.String())
	g.output.Reset()

	return resp
}

func (g *generator) generateProtobufClient(file *descriptor.FileDescriptorProto, service *descriptor.ServiceDescriptorProto) {
	g.P()
	comments, err := g.reg.ServiceComments(file, service)
	if err == nil && comments.Leading != "" {
		g.P(`/**`)
		g.printComments(comments, ``)
		g.P(`*/`)
	}
	g.P(`class `, clientName(service), `(private val client: OkHttpClient, private val serverAddress: String) {`)

	g.P(`    private val serviceName = `, strconv.Quote(fullServiceName(file, service)))
	g.P()
	g.P(`    private fun makeRequest(body: Message, method: String): ResponseBody {`)
	g.P(`	    val request = Request.Builder()`)
	g.P(`	        .url("$serverAddress/twirp/$serviceName/$method")`)
	g.P(`	        .post(body.toByteArray().toRequestBody())`)
	g.P(`	        .header("Content-Type", "application/protobuf")`)
	g.P(`	        .build()`)
	g.P()
	g.P(`	    val response = client.newCall(request).execute()`)
	g.P(`	    return response.body!!`)
	g.P(`    }`)

	for _, method := range service.Method {
		g.P()
		comments, err := g.reg.MethodComments(file, service, method)
		if err == nil && comments.Leading != "" {
			g.P(`    /*`)
			g.printComments(comments, `        `)
			g.P(`    */`)
		}

		methName := methodName(method)
		inputName := methodInputName(method)

		inputType := getJavaType(file, method.GetInputType())
		outputType := getJavaType(file, method.GetOutputType())

		g.P(`    suspend fun `, methName, `(`, inputName, `: `, inputType, `): `, outputType, ` {`)
		g.P(`        return withContext(Dispatchers.IO) {`)
		g.P(`            val response = makeRequest(`, inputName, `, "`, method.GetName(),`")`)
		g.P(`            `, outputType, `.parseFrom(response.byteStream())`)
		g.P(`        }`)
		g.P(`    }`)
	}

	g.P(`}`)
}

func (g *generator) P(args ...string) {
	for _, v := range args {
		g.output.WriteString(v)
	}
	g.output.WriteByte('\n')
}

func (g *generator) printComments(comments typemap.DefinitionComments, prefix string) {
	text := strings.TrimSuffix(comments.Leading, "\n")
	for _, line := range strings.Split(text, "\n") {
		g.P(prefix, strings.TrimPrefix(line, " "))
	}
}

func serviceName(service *descriptor.ServiceDescriptorProto) string {
	return stringutils.CamelCase(service.GetName())
}

func clientName(service *descriptor.ServiceDescriptorProto) string {
	return serviceName(service) + "Client"
}

func fullServiceName(file *descriptor.FileDescriptorProto, service *descriptor.ServiceDescriptorProto) string {
	name := serviceName(service)
	if pkg := file.GetPackage(); pkg != "" {
		name = pkg + "." + name
	}
	return name
}

func methodName(method *descriptor.MethodDescriptorProto) string {
	return lowerCamelCase(method.GetName())
}

func methodInputName(meth *descriptor.MethodDescriptorProto) string {
	fullName := meth.GetInputType()
	split := strings.Split(fullName, ".")
	return lowerCamelCase(split[len(split)-1])
}

func ktFileName(f *descriptor.FileDescriptorProto) string {
	name := *f.Name
	if ext := path.Ext(name); ext == ".proto" || ext == ".protodevel" {
		name = name[:len(name)-len(ext)]
	}
	name = stringutils.CamelCase(name) + ".kt"
	return strings.Replace(f.GetPackage(), ".", "/", -1) + "/" + name
}

func getJavaPackage(file *descriptor.FileDescriptorProto) string {
	pkg := file.Options.GetJavaPackage()
	if pkg != "" {
		return pkg
	}
	return file.GetPackage()
}

func getJavaType(file *descriptor.FileDescriptorProto, name string) string {
	pkg := getJavaPackage(file)
	multi := file.Options.GetJavaMultipleFiles()

	p := strings.LastIndex(name, ".")
	typeName := name[p+1:]

	if pkg == "" {
		return fmt.Sprintf("%s", typeName)
	} else if multi {
		return fmt.Sprintf("%s.%s", pkg, typeName)
	} else {
		outerClass := getJavaOuterClassName(file)
		return fmt.Sprintf("%s.%s.%s", pkg, outerClass, typeName)
	}
}

func getProtoName(file *descriptor.FileDescriptorProto) string {
	name := file.GetName()
	ext := filepath.Ext(name)
	if ext == ".proto" || ext == ".protodevel" {
		name = name[0 : len(name)-len(ext)]
	}
	return name
}

func getJavaOuterClassName(file *descriptor.FileDescriptorProto) string {
	name := file.Options.GetJavaOuterClassname()
	if name != "" {
		return name
	}

	name = stringutils.CamelCase(getProtoName(file))
	outer := name + "OuterClass"
	for _, desc := range file.GetMessageType() {
		if strings.Title(desc.GetName()) == name {
			return outer
		}
	}

	for _, desc := range file.GetService() {
		if strings.Title(desc.GetName()) == name {
			return outer
		}
	}

	for _, desc := range file.GetEnumType() {
		if strings.Title(desc.GetName()) == name {
			return outer
		}
	}

	return name
}

func lowerCamelCase(s string) string {
	name := stringutils.CamelCase(s)
	runes := []rune(name)
	runes[0] = unicode.ToLower(runes[0])
	return string(runes)
}
