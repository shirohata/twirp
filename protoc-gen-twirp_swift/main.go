// Copyright 2018 Twitch Interactive, Inc.  All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may not
// use this file except in compliance with the License. A copy of the License is
// located at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// or in the "license" file accompanying this file. This file is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

package main

import (
	"bytes"
	"flag"
	"fmt"
	"os"
	"strconv"
	"strings"
	"unicode"

	"github.com/golang/protobuf/proto"
	"github.com/golang/protobuf/protoc-gen-go/descriptor"
	plugin "github.com/golang/protobuf/protoc-gen-go/plugin"
	"github.com/twitchtv/twirp/internal/gen"
	"github.com/twitchtv/twirp/internal/gen/stringutils"
	"github.com/twitchtv/twirp/internal/gen/typemap"
)

func main() {
	versionFlag := flag.Bool("version", false, "print version and exit")
	flag.Parse()
	if *versionFlag {
		fmt.Println(gen.Version)
		os.Exit(0)
	}

	g := newGenerator()
	gen.Main(g)
}

func newGenerator() *generator {
	return &generator{output: new(bytes.Buffer)}
}

type generator struct {
	reg    *typemap.Registry
	output *bytes.Buffer
}

func (g *generator) Generate(in *plugin.CodeGeneratorRequest) *plugin.CodeGeneratorResponse {
	genFiles := gen.FilesToGenerate(in)
	g.reg = typemap.New(in.ProtoFile)

	resp := new(plugin.CodeGeneratorResponse)
	for _, f := range genFiles {
		respFile := g.generateFile(in, f)
		if respFile != nil {
			resp.File = append(resp.File, respFile)
		}
	}

	return resp
}

func (g *generator) generateFile(in *plugin.CodeGeneratorRequest, file *descriptor.FileDescriptorProto) *plugin.CodeGeneratorResponse_File {
	g.P("// Code generated by protoc-gen-twirp_kotlin_okhttp ", gen.Version, ", DO NOT EDIT.")
	g.P("// source: ", file.GetName())
	g.P()
	g.P(`import Foundation`)
	g.P(`import SwiftProtobuf`)

	for _, service := range file.Service {
		g.generateProtobufClient(in, file, service)
	}

	resp := new(plugin.CodeGeneratorResponse_File)
	resp.Name = proto.String(swiftFileName(file))
	resp.Content = proto.String(g.output.String())
	g.output.Reset()

	return resp
}

func (g *generator) generateProtobufClient(in *plugin.CodeGeneratorRequest, file *descriptor.FileDescriptorProto, service *descriptor.ServiceDescriptorProto) {
	g.P()
	comments, err := g.reg.ServiceComments(file, service)
	if err == nil && comments.Leading != "" {
		g.P(`/**`)
		g.printComments(comments, ``)
		g.P(`*/`)
	}
	g.P(`final class `, clientName(service), ` {`)
	g.P(`    private let serviceName: String = `, strconv.Quote(fullServiceName(file, service)))
	g.P(`    private let session: URLSession`)
	g.P(`    private let serverAddress: String`)
	g.P(`    private let prefix: String`)
	g.P()
	g.P(`    init(session: URLSession, serverAddress: String, prefix: String = "/twirp") {`)
	g.P(`        self.session = session`)
	g.P(`        self.serverAddress = serverAddress`)
	g.P(`        self.prefix = prefix`)
	g.P(`    }`)
	g.P()
	g.P(`    private func makeRequest(body: Data, method: String, completionHandler: @escaping (Data?, URLResponse?, Error?) -> Void) -> URLSessionDataTask {`)
	g.P(`        let url = URL(string: serverAddress + prefix + "/" + serviceName + "/" + method)!`)
	g.P(`        var request = URLRequest(url: url)`)
	g.P(`        request.setValue("application/protobuf", forHTTPHeaderField: "Content-Type")`)
	g.P(`        request.httpMethod = "POST"`)
	g.P(`        request.httpBody = body`)
	g.P(`        let task = session.dataTask(with: request, completionHandler: completionHandler)`)
	g.P(`        task.resume()`)
	g.P(`        return task`)
	g.P(`     }`)

	for _, method := range service.Method {
		g.P()
		comments, err := g.reg.MethodComments(file, service, method)
		if err == nil && comments.Leading != "" {
			g.P(`    /*`)
			g.printComments(comments, `        `)
			g.P(`    */`)
		}

		methName := methodName(method)
		inputName := methodInputName(method)

		inputType := getSwiftType(in, method.GetInputType())
		outputType := getSwiftType(in, method.GetOutputType())
		fmt.Errorf("swiftprefix=%s", file.GetOptions().GetSwiftPrefix())

		g.P(`    func `, methName, `(`)
		g.P(`            `, inputName, ` request: `, inputType, `,`)
		g.P(`            handler: @escaping (`, outputType, `?, Error?) -> ()`)
		g.P(`    ) -> URLSessionDataTask {`)
		g.P(`        let data = try! request.serializedData()`)
		g.P(`        return makeRequest(body: data, method: "` + method.GetName() + `") { data, response, error in`)
		g.P(`            if let error = error {`)
		g.P(`                handler(nil, error)`)
		g.P(`            } else if let data = data {`)
		g.P(`                var message: ` + outputType + `? = nil`)
		g.P(`                do {`)
		g.P(`                    message = try ` + outputType + `(serializedData: data)`)
		g.P(`                } catch let error {`)
		g.P(`                    handler(nil, error)`)
		g.P(`                    return`)
		g.P(`                }`)
		g.P(`                handler(message, nil)`)
		g.P(`            } else {`)
		g.P(`                handler(nil, nil)`)
		g.P(`            }`)
		g.P(`        }`)
		g.P(`    }`)
	}

	g.P(`}`)
}

func (g *generator) P(args ...string) {
	for _, v := range args {
		g.output.WriteString(v)
	}
	g.output.WriteByte('\n')
}

func (g *generator) printComments(comments typemap.DefinitionComments, prefix string) {
	text := strings.TrimSuffix(comments.Leading, "\n")
	for _, line := range strings.Split(text, "\n") {
		g.P(prefix, strings.TrimPrefix(line, " "))
	}
}

func serviceName(service *descriptor.ServiceDescriptorProto) string {
	return stringutils.CamelCase(service.GetName())
}

func clientName(service *descriptor.ServiceDescriptorProto) string {
	return serviceName(service) + "Client"
}

func fullServiceName(file *descriptor.FileDescriptorProto, service *descriptor.ServiceDescriptorProto) string {
	name := serviceName(service)
	if pkg := file.GetPackage(); pkg != "" {
		name = pkg + "." + name
	}
	return name
}

func methodName(method *descriptor.MethodDescriptorProto) string {
	return lowerCamelCase(method.GetName())
}

func methodInputName(meth *descriptor.MethodDescriptorProto) string {
	fullName := meth.GetInputType()
	split := strings.Split(fullName, ".")
	return lowerCamelCase(split[len(split)-1])
}

func swiftFileName(f *descriptor.FileDescriptorProto) string {
	name := stringutils.BaseName(f.GetName())
	name = stringutils.CamelCase(name) + ".twirp.swift"
	return name
}

func findProtoFile(in *plugin.CodeGeneratorRequest, messageName string) *descriptor.FileDescriptorProto {
	for _, v := range in.GetProtoFile() {
		pkg := v.GetPackage()
		for _, r := range v.GetMessageType() {
			if "."+pkg+"."+r.GetName() == messageName {
				return v
			}
		}
	}
	return nil
}

func snakeCase(s string) string {
	snake := strings.Replace(s, ".", "_", -1)
	var buf bytes.Buffer
	upperNext := true
	for _, r := range snake {
		if upperNext {
			fmt.Fprintf(&buf, "%c", unicode.ToUpper(r))
		} else {
			fmt.Fprintf(&buf, "%c", r)
		}
		upperNext = r == '_'
	}
	return buf.String()
}

func getSwiftType(in *plugin.CodeGeneratorRequest, name string) string {
	file := findProtoFile(in, name)
	pkg := snakeCase(file.GetPackage())

	p := strings.LastIndex(name, ".")
	typeName := name[p+1:]

	if pkg == "" {
		return fmt.Sprintf("%s", typeName)
	} else {
		return fmt.Sprintf("%s_%s", pkg, typeName)
	}
}

func lowerCamelCase(s string) string {
	name := stringutils.CamelCase(s)
	runes := []rune(name)
	runes[0] = unicode.ToLower(runes[0])
	return string(runes)
}
